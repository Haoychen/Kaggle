train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
feature.data <- rbind(train.data[,c(-2)], test.data)
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
feature.data$Fare <- log(feature.data$Fare)
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
is.na(feature.data$Age)
sum(is.na(feature.data$Age))
sum(is.na(train.data$Age))
View(famIDs)
View(feature.data)
View(train.data)
k<- c[train.data$Pclass,train.data$Embarked]
k<- train.data[c(1,2),]
k<- train.data[,c(1,2)]
rm(k)
k<- train.data[,c(train.data$Pclass,train.data$Embarked)]
k<- train.data[,c("Pclass","Embarked")]
View(k)
rm(k)
length(train.data)
nrow(train.data)
plot(density(train.data$Fare))
plot(density(log(train.data$Fare))
)
View(feature.data)
feature<- c("Pclass","Embarked","Age","Sex,"Fare","FamilySize")
feature<- c("Pclass","Embarked","Age","Sex,"Fare","FamilySize")
k<- c('w','e')
k<- c("w","e")
k
k<- c("Pclass","Embarked")
k<- c("Pclass","Embarked","Age","Sex,"Fare","FamilySize")
View(feature.data)
rm(k)
feature<- c("Pclass","Embarked","Age","Sex","Fare","FamilySize")
train.x<- feature.data[nrow(train.data),feature]
train.x<- feature.data[c(1:nrow(train.data)),feature]
View(train.x)
rm(feature)
feature<- c("Pclass","Embarked","Age","Sex","Fare","FamilySize")
new.data<- feature.data[,feature]
View(new.data)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
library(randomForest)
rf<- randomForest(train.x, train.y,ntree = 500)
str(train.x)
sum(is.na(train.x$Pclass))
sum(is.na(train.x$Embarked))
sum(is.na(train.x$Age))
sum(is.na(train.x$Sex))
sum(is.na(train.x$Fare))
sum(is.na(train.x$FamilySize))
sum(is.na(test$Pclass))
sum(is.na(test$Embarked))
sum(is.na(test$Age))
sum(is.na(test$Sex))
sum(is.na(test$FamilySize))
sum(is.na(test$Fare))
rf<- randomForest(train.x, train.y,ntree = 500)
?randomForest
dim(train.x)
dim(train.y)
length(train.y)
dim(test)
rf<- randomForest(train.x, train.y,ntree = 500)
str(train.x)
str(test)
str(train.data)
str(feature.data)
feature.data$Age <- as.numeric(feature.data$Age)
new.data<- feature.data[,feature]
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
str(train.x)
str(train.x)
rf<- randomForest(train.x, train.y,ntree = 500)
new.data<- feature.data[,feature]
feature<- c("Pclass","Age","Sex","Fare","FamilySize")
new.data<- feature.data[,feature]
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
sum()
str(train.x)
str(test)
sum(is.nan(train.x$Pclass))
sum(is.nan(train.x$Age))
sum(is.nan(train.x$Sex))
sum(is.nan(train.x$Fare))
sum(is.nan(train.x$FamilySize))
train.x[complete.case(train.x),]
train.x[complete.cases(train.x),]
View(train.x)
View(train.data)
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","FamilySize")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, try.test)
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","FamilySize")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rfpredice
rf$err.rate
rf$err.rate
mean(rf$oob.times[,1])
rf$confusion
rf$oob.times
mean(rf$err.rate[,1])
rf$oob.times
rf$err.rate
rf$confusion
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","FamilySize","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rf$confusion
test.data$Embarked
is.na(test.data$Embarked)
str(test)
str(train.x)
str(train.data)
train.data$Embarked[1]
