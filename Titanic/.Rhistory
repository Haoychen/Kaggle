feature<- c("Pclass","Age","Sex","Fare","FamilySize")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rfpredice
rf$err.rate
rf$err.rate
mean(rf$oob.times[,1])
rf$confusion
rf$oob.times
mean(rf$err.rate[,1])
rf$oob.times
rf$err.rate
rf$confusion
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","FamilySize","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rf$confusion
test.data$Embarked
is.na(test.data$Embarked)
str(test)
str(train.x)
str(train.data)
train.data$Embarked[1]
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
View(feature.data)
#Select feature
feature<- c("Pclass","Age","Sex","Fare","Parch","SibSp","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rf$confusion
mean(rf$err.rate[,1])
rf$importance
try.data<-train.data
apply(try.data$Survived,sum)
try.data
try.data$sum<-0
family<- function(){
if (try.data$SibSp > 0){
return (1)
}else{
return(2)
}
}
k<- apply(try.data, 1, family)
k<- apply(try.data, 1, family(2))
k<- apply(try.data, 1, FUN = family)
feature.data$family_or_not<- 0
View(feature.data)
feature.data$family_or_not<- 0
for ( i in 1:nrow(feature.data)){
if (feature.data$FamilySize[i] >2){
feature.data$family_or_not<- 1
}
}
View(feature.data)
feature.data$family_or_not<- 0
for ( i in 1:nrow(feature.data)){
if (feature.data$FamilySize[i] > 3){
feature.data$family_or_not<- 1
}
}
feature.data$family_or_not<- 0
for ( i in 1:nrow(feature.data)){
print(feature.data$FamilySize[i])
if (feature.data$FamilySize[i] > 3){
feature.data$family_or_not<- 1
}
}
feature.data$family_or_not<- 1
for ( i in 1:nrow(feature.data)){
print(feature.data$FamilySize[i])
if (feature.data$FamilySize[i] ==1){
feature.data$family_or_not<- 0
}
}
for ( i in 1:nrow(feature.data)){
if(feature.data$FamilySize == 1){
feature.data$family_or_not[i] <- 0
}
}
feature.data$family_or_not<- 1
for ( i in 1:nrow(feature.data)){
if(feature.data$FamilySize[i] == 1){
feature.data$family_or_not[i] <- 0
}
}
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
feature.data$family_or_not<- 1
for ( i in 1:nrow(feature.data)){
if(feature.data$FamilySize[i] == 1){
feature.data$family_or_not[i] <- 0
}
}
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","family_or_not","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rf$confusion
rf$err.rate
rf$importance
mean(rf$err.rate[,1])
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","Parch","SibSp","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rf$importance
rfpredice<- predict(rf, train.x)
rfpredice
k<- as.integer(rfpredice)
k
k<- k-1
k
train.data$Survived
count<- 0
for (i in 1:891){
if(train.data$Survived[i] != k[i]){
count+=1
}
}
print(count/891)
count<- 0
for (i in 1:891){
if(train.data$Survived[i] != k[i]){
count+=1
}
}
print(count/891)
for (i in 1:891){
if(train.data$Survived[i] != k[i]){
count+=1
}
}
count<- 0
for (i in 1:891){
if(train.data$Survived[i] != k[i]){
count<- count + 1
}
}
k<- apply(try.data, 1, FUN = family)
#
count<- 0
for (i in 1:891){
if(train.data$Survived[i] != k[i]){
count<- count + 1
}
}
print(count/891)
gendermodel<- read.csv('gendermodel.csv')
genderclassmodel<- read.csv('genderclassmodel.csv')
View(genderclassmodel)
View(gendermodel)
count<- 0
for (i in 1:418){
if(gendermodel[i] != genderclassmodel[i]){
count<- count + 1
}
}
print(count/418)
count<- 0
for (i in 1:418){
if(gendermodel[i] != genderclassmodel[i]){
count<- count + 1
}
}
print(count/418)
#
count<- 0
for (i in 1:418){
if(gendermodel[2,i] != genderclassmodel[2,i]){
count<- count + 1
}
}
print(count/418)
count<- 0
for (i in 1:418){
if(gendermodel[i,2] != genderclassmodel[i,2]){
count<- count + 1
}
}
print(count/418)
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","Parch","SibSp","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
rfpredice
k<- as.numeric(rfpredice)
k
k<-k-1
k
count<- 0
for (i in 1:418){
if(gendermodel[i,2] != k[i]){
count<- count + 1
}
}
print(count/418)
count<- 0
for (i in 1:418){
if(genderclassmodel[i,2] != k[i]){
count<- count + 1
}
}
print(count/418)
#This is possible feature engineerings of Kaggle Titanic
#Load train data
train.data <- read.csv('train.csv', stringsAsFactors = FALSE)
test.data <- read.csv('test.csv', stringsAsFactors = FALSE)
#combine the two data set's features, then do feature engineering
feature.data <- rbind(train.data[,c(-2)], test.data)
#Inspect train data and clean train data
str(feature.data)
feature.data$Pclass <- as.factor(feature.data$Pclass)
feature.data$Sex <- as.factor(feature.data$Sex)
feature.data$Embarked <- as.factor(feature.data$Embarked)
#Transfer original feature name into useful feature Title
feature.data$Title <- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
feature.data$Title <- sub(' ', '', feature.data$Title)
feature.data$Title[feature.data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
feature.data$Title[feature.data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
feature.data$Title[feature.data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
feature.data$Title <- factor(feature.data$Title)
#Combine features SibSp and Parch into FamilySize, reduce dimensions
feature.data$FamilySize <- feature.data$SibSp + feature.data$Parch + 1
#Find the people in the same family, with the same Surname and concerning the familysize
feature.data$Surname<- sapply(feature.data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
feature.data$FamilyID <- paste(as.character(feature.data$FamilySize), feature.data$Surname, sep="")
feature.data$FamilyID[feature.data$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(feature.data$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
feature.data$FamilyID[feature.data$FamilyID %in% famIDs$Var1] <- 'Small'
feature.data$FamilyID <- factor(feature.data$FamilyID)
#Fill in the value of missing data in Fare
feature.data[is.na(feature.data$Fare),]$Fare <- mean(feature.data[feature.data$Pclass == 3,]$Fare, na.rm = TRUE)
#Fill in the value of missing data in Age by Title
fill_in_age_by_title <- function(obs) {
if(is.na(obs['Age'])){
title <- obs['Title']
age <- mean(feature.data[feature.data$Title == title,]$Age, na.rm = TRUE)
return(age)
}else {
return(obs['Age'])
}
}
feature.data$Age <- apply(feature.data, 1, FUN=fill_in_age_by_title)
feature.data$Age <- as.numeric(feature.data$Age)
# Weik below
#Select feature
feature<- c("Pclass","Age","Sex","Fare","Parch","SibSp","Embarked")
new.data<- feature.data[,feature]
#Applying RF
library(randomForest)
train.y<- as.factor(train.data$Survived)
train.x<- new.data[c(1:nrow(train.data)),]
test<- new.data[-c(1:nrow(train.data)),]
rf<- randomForest(train.x, train.y,ntree = 500)
rfpredice<- predict(rf, test)
table(feature.data$Pclass,feature.data$Cabin)
View(feature.data)
str(feature.data$Pclass)
table(feature.data$Pclass)
table(feature.data$Cabin)
table(feature.data$Pclass,feature.data$Embarked)
View(train.data)
